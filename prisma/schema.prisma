// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum AddressType {
  RESIDENTIAL
  COMMERCIAL
  OTHER
}

enum CardStatus {
  CREATED
  UNBOUND
  NORMAL
  CANCELED
  BLOCKED
}

enum AuthorizationCategory {
  AUTHORIZATION
  DECLINED
  CONFIRMATION
  INSTALLMENT
  CANCELLATION
}

enum CardType {
  PLASTIC
  VIRTUAL
}

model User {
  id    Int     @id @default(autoincrement())
  email String  @unique
  name  String?
  posts Post[]
}

enum MaritalStatus {
  SINGLE
  MARRIED
  DIVORCED
  WIDOWER
}

enum Gender {
  MALE
  FEMALE
  NOTPROVIDED
}

model Post {
  id        Int     @id @default(autoincrement())
  title     String
  content   String?
  published Boolean @default(false)
  author    User    @relation(fields: [authorId], references: [id])
  authorId  Int
}

model Account {
  //dados da conta 
  id          String           @id @default(uuid())
  name        String
  document    String           @unique
  email       String           @unique
  addresses   AccountAddress[]
  phones      AccountPhone[]
  status      Boolean          @default(true)
  status_name String?
  Avatar      File?            @relation(fields: [avatarId], references: [id])
  avatarId    String?
  //dados auth 
  authCode  String?
  expiresAt DateTime?

  cards     Card[]
  customers Customer[]

  application_id     Int?
  account_id         Int?
  customer_id        Int?
  entity_id          Int?
  program_id         Int?
  due_date_id        Int?
  due_date_day       Int?
  max_credit_limit   Float   @default(0)
  total_credit_limit Float   @default(0)
  accrual_status     String?

  program   Program? @relation(fields: [program_id], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AccountPhone {
  id           String   @id @default(uuid())
  phone        String   @unique
  phone_type   String
  country_code String
  area_code    Int
  active       Boolean
  account      Account? @relation(fields: [accountId], references: [id])

  accountId String?
}

model AccountAddress {
  id                    String      @id @default(uuid())
  address               String
  number                Int
  country_code          String
  country               String
  neighborhood          String
  city                  String
  state                 String
  zip_code              String
  address_type          AddressType @default(COMMERCIAL)
  complementary_address String?
  mailing_address       Boolean
  active                Boolean
  account               Account?    @relation(fields: [accountId], references: [id])

  accountId String?
}

model Program {
  id         Int       @id @default(autoincrement())
  name       String
  is_active  Boolean
  program_id Int
  due_dates  DueDate[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  accounts Account[]
}

model DueDate {
  id          Int     @id @default(autoincrement())
  day         Int
  active      Boolean
  due_date_id Int
  programId   Int
  program     Program @relation(fields: [programId], references: [id])
}

model Card {
  id                          String     @id @default(uuid())
  name                        String
  type                        CardType   @default(VIRTUAL)
  status                      CardStatus @default(CREATED)
  printed_name                String?
  last_four_digits            String?
  expiration_date             DateTime?
  isDependentCard             Boolean?
  isNoNameCard                Boolean?
  bulkId                      String?
  cvv_rotation_interval_hours Int?
  transaction_limit           Float?
  abu_enabled                 Boolean?
  mode_type                   String?

  logo                 String?
  hasChangedPassword   Boolean?
  lastNormalStatusDate DateTime?
  trackingCode         String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  account   Account? @relation(fields: [accountId], references: [id])
  accountId String?

  customer   Customer? @relation(fields: [customerId], references: [id])
  customerId String?
}

model Customer {
  id        String   @id @default(uuid())
  name      String
  accountId String?
  cards     Card[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  account Account? @relation(fields: [accountId], references: [id])
}

enum FileType {
  Link
  Attachment
}

model File {
  id       String    @id @default(uuid())
  name     String?
  path     String?
  url      String?
  fileType FileType  @default(Attachment)
  account  Account[]

  @@map("files")
}
